name: Secure Tunnel Checker

on:
  workflow_run:
    workflows: ["Auto Task"] # نام دقیق ورکفلو اصلی شما
    types:
      - completed
    branches:
      - main # یا شاخه اصلی ریپازیتوری شما

  workflow_dispatch: # برای اینکه بتوانید به صورت دستی هم اجرا کنید

jobs:
  test_configs_job:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Xray Core
        run: |
          # Fetch the latest Xray release tag
          XRAY_VERSION=$(curl -s "https://api.github.com/repos/XTLS/Xray-core/releases/latest" | grep -Po '"tag_name": "v\K[^"]*')
          echo "Latest Xray version: v${XRAY_VERSION}"

          # Download Xray Core for Linux 64-bit
          XRAY_URL="https://github.com/XTLS/Xray-core/releases/download/v${XRAY_VERSION}/Xray-linux-64.zip"
          echo "Downloading Xray from: ${XRAY_URL}"
          curl -L -o xray.zip $XRAY_URL

          # Unzip Xray core and essential data files (Xray.dat removed)
          unzip xray.zip xray geoip.dat geosite.dat
          
          # Move xray binary to a PATH directory and make it executable
          sudo mv xray /usr/local/bin/
          sudo chmod +x /usr/local/bin/xray
          
          # Create Xray data directory and move data files (Xray.dat removed from mv command)
          sudo mkdir -p /usr/local/share/xray/
          sudo mv geoip.dat geosite.dat /usr/local/share/xray/
          
          echo "Xray installed successfully. Version:"
          xray version
        
      - name: Create Xray Tester Script (xray_tester.py)
        run: |
          cat << 'EOF' > xray_tester.py
          # -- coding: utf-8 --
          import base64
          import json
          import os
          import re
          import subprocess
          import sys
          import time
          import threading
          from typing import List, Dict, Union, Optional
          import concurrent.futures

          # --- Global Constants & Variables ---
          
          PRINT_LOCK = threading.Lock() 

          # مسیر فایل ورودی (تولید شده توسط Workflow قبلی)
          INPUT_CONFIGS_FILE = "data/khanevadeh_base64.txt"
          # مسیر فایل خروجی برای کانفیگ‌های فعال واقعی
          OUTPUT_WORKING_CONFIGS_FILE = "data/secure_access_list.txt" # اسم فایل خروجی جدید

          # حداکثر تعداد کانفیگ‌هایی که می‌خواهیم تست واقعی کنیم (برای مدیریت زمان GitHub Actions)
          MAX_CONFIGS_FOR_REAL_TEST = 100 # پیشنهاد: با 100 شروع کنید، می‌توانید تغییر دهید
          
          # پورت داخلی که Xray روی آن پروکسی SOCKS5 ایجاد می‌کند
          XRAY_LOCAL_SOCKS_PORT = 1080
          # پورت داخلی که Xray روی آن پروکسی HTTP ایجاد می‌کند (برای curl)
          XRAY_LOCAL_HTTP_PORT = 1081

          # زمان‌بندی‌ها
          XRAY_STARTUP_TIMEOUT = 10 # ثانیه برای شروع Xray
          TEST_URL_TIMEOUT = 10     # ثانیه برای curl کردن URL تست
          
          # URL برای تست اتصال واقعی (توصیه می‌شود یک URL معتبر و عمومی باشد که در ایران فیلتر نیست و از CDN استفاده نمی‌کند)
          TEST_URL = "https://www.google.com/generate_204" # این URL فقط یک پاسخ 204 بدون محتوا می‌دهد و سریع است.

          VLESS_PARSE_PATTERN: re.Pattern = re.compile(
              r"vless://"
              r"(?P<uuid>[a-f0-9-]+)"     
              r"@"
              r"(?P<server>[^:]+)"       
              r":"
              r"(?P<port>\d+)"           
              r"\?"                      
              r"(?:[^&]*&)*"             
              r"security=reality"        
              r"(?:[^&]*&)*"             
              r"pbk=(?P<pbk>[^&]+)"      
              r"(?:[^&]*&)*"             
              r"(?:fp=(?P<fp>[^&]+))?"   
              r"(?:&sni=(?P<sni>[^&]+))?" # اضافه کردن sni به پترن
              r"(?:&alpn=(?P<alpn>[^&]+))?" # اضافه کردن alpn به پترن
              r".*$",                    
              re.IGNORECASE
          )
          
          def safe_print(message: str) -> None:
              with PRINT_LOCK:
                  print(message)

          def print_progress(iteration: int, total: int, prefix: str = '', suffix: str = '', bar_length: int = 50) -> None:
              with PRINT_LOCK:
                  percent = ("{0:.1f}").format(100 * (iteration / float(total)))
                  filled_length = int(bar_length * iteration // total)
                  bar = '█' * filled_length + '-' * (bar_length - filled_length)
                  sys.stdout.write(f'\r{prefix} |{bar}| {percent}% {suffix}')
                  sys.stdout.flush()
                  if iteration == total:
                      sys.stdout.write('\n')

          def parse_vless_config(config_str: str) -> Optional[Dict[str, Union[str, int, str]]]:
              match = VLESS_PARSE_PATTERN.match(config_str)
              if match:
                  parts = match.groupdict()
                  if all(parts.get(k) for k in ["uuid", "server", "port", "pbk"]):
                      try:
                          port_int = int(parts["port"])
                          return {
                              "uuid": parts["uuid"],
                              "server": parts["server"],
                              "port": port_int,
                              "pbk": parts["pbk"],
                              "fp": parts.get("fp", ""),
                              "sni": parts.get("sni", ""),
                              "alpn": parts.get("alpn", "h2,http/1.1"), # مقدار پیش‌فرض h2,http/1.1
                              "original_config": config_str
                          }
                      except ValueError:
                          return None
              return None

          def create_xray_config_file(config_data: Dict[str, Union[str, int, str]], config_path: str) -> bool:
              """Creates a temporary Xray config file for a given VLESS Reality configuration."""
              config_json = {
                  "log": {
                      "loglevel": "warning"
                  },
                  "inbounds": [
                      {
                          "port": XRAY_LOCAL_SOCKS_PORT,
                          "protocol": "socks",
                          "settings": {
                              "auth": "noauth",
                              "udp": True,
                              "ip": "127.0.0.1"
                          }
                      },
                      {
                          "port": XRAY_LOCAL_HTTP_PORT,
                          "protocol": "http",
                          "settings": {
                              "ip": "127.0.0.1"
                          }
                      }
                  ],
                  "outbounds": [
                      {
                          "protocol": "vless",
                          "settings": {
                              "vnext": [
                                  {
                                      "address": config_data["server"],
                                      "port": config_data["port"],
                                      "users
